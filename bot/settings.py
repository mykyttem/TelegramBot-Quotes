from aiogram import types
from aiogram.dispatcher.filters import Text

from config import dp, ref


""" Settings """

@dp.message_handler(Text(equals=['–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öô']))
async def settings(message: types.Message):
    btns_settings = [
        [types.KeyboardButton(text='–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç–∏ ‚è±')],
        [types.KeyboardButton(text='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è üßæ')],
        [types.KeyboardButton(text='–ù–∞–∑–∞–¥ ‚è™')]
    ]

    keyboard_btns = types.ReplyKeyboardMarkup(keyboard=btns_settings, resize_keyboard=True)
    await message.answer('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', reply_markup=keyboard_btns)


@dp.message_handler(Text(equals=['–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ü–∏—Ç–∞—Ç–∏ ‚è±']))
async def time_send_quote(message: types.Message):
    btns_time = []

    # Add buttons for 30 minutes and hours 1 to 24 in separate rows
    btns_time.append([types.InlineKeyboardButton(text='0.5', callback_data='time_0.5')])
    for i in range(1, 25):
        btns_time.append([types.InlineKeyboardButton(text=f'{i} –≥–æ–¥–∏–Ω–∏', callback_data=f'time_{i}')])

    keyboard_btns = types.InlineKeyboardMarkup(inline_keyboard=btns_time)

    await message.answer('–û–±–µ—Ä—ñ—Ç—å —á–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏', reply_markup=keyboard_btns)


@dp.callback_query_handler(lambda c: c.data.startswith('time_'))
async def choice_time(callback_query: types.CallbackQuery):
    await callback_query.answer()

    time_value = float(callback_query.data.split('_')[1])
    await callback_query.message.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ {time_value} –≥–æ–¥–∏–Ω–∏')

    # change data user
    username = callback_query.from_user.username
    user_data = ref.child(username).get()

    # convert hours in seconds
    seconds = int(time_value * 3600)

    # update
    user_data["time-quotes"] = int(seconds)
    ref.child(username).update(user_data)

    await callback_query.message.answer('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—ñ ‚úÖ') 


@dp.message_handler(Text(equals=['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è üßæ']))
async def settings_category(message: types.Message):

    btns_category = [
        [types.InlineKeyboardButton(text='–∑ –ö–Ω–∏–≥ üìö', callback_data='category_–∑ –ö–Ω–∏–≥')],
        [types.InlineKeyboardButton(text='–∑ –§—ñ–ª—å–º—ñ–≤ üé¨', callback_data='category_–∑ –§—ñ–ª—å–º—ñ–≤')],
        [types.InlineKeyboardButton(text='–í—ñ–¥–æ–º–∏—Ö –ª—é–¥–µ–π', callback_data='category_–í—ñ–¥–æ–º–∏—Ö –ª—é–¥–µ–π')],
        [types.InlineKeyboardButton(text='–í—Å—ñ', callback_data='category_–í—Å—ñ')],
    ]

    keyboard_btns = types.InlineKeyboardMarkup(inline_keyboard=btns_category)
    await message.answer('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ü–∏—Ç–∞—Ç', reply_markup=keyboard_btns)


@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def choice_category_settings(callback_query: types.CallbackQuery):
    await callback_query.answer()

    select_category = callback_query.data.split('_')[1]

    # change data user
    username = callback_query.from_user.username
    user_data = ref.child(username).get()

    # update
    user_data["category"] = select_category
    ref.child(username).update(user_data)

    
    await callback_query.message.answer('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—ñ ‚úÖ') 
    await callback_query.message.answer(select_category) 