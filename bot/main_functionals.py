from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

import random
import asyncio

from config import dp, ref
from tools import l_trans, trans_google, quotes


#FIXME: if you do not start from the start, the user's language choice will not be found


""" Main functionals 
    Using "state: FSMContext" for pass variables between functions 
"""

# beginning menu
@dp.message_handler(commands=['start'])
async def choose_languages(message: types.Message):

    btns_language = [
        [types.KeyboardButton(text='–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶')],
        [types.KeyboardButton(text='English üá∫üá∏')]
    ]

    keyboard_start_languages = types.ReplyKeyboardMarkup(keyboard=btns_language, resize_keyboard=True)

    await message.answer(f'–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É\n choose a language', reply_markup=keyboard_start_languages)


@dp.message_handler(Text(equals=['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶', 'English üá∫üá∏']))
async def beginning_btns(message: types.Message, state: FSMContext):

    if message.text == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶":
        language = "uk"
    elif message.text == "English üá∫üá∏":
        language = "en"


    # start buttons
    start_btns = [
        [types.KeyboardButton(text=l_trans('–ó–∞–ø—É—Å–∫ ‚úà', language))],
        [types.KeyboardButton(text=l_trans('–†—É—á–Ω–∏–π —Ä–µ–∂–∏–º', language))],
        [types.KeyboardButton(text=l_trans('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', language))],
        [types.KeyboardButton(text=l_trans('–ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ —Ü–∏—Ç–∞—Ç–∏ üìùüíñ', language))],
        [types.KeyboardButton(text=l_trans("–ó–≤'—è–∑–æ–∫ üí¨", language))],
        [types.KeyboardButton(text=l_trans('–ó—É–ø–∏–Ω–∏—Ç–∏ ‚ùå', language))],
    ]
    keyboard_start_btns = types.ReplyKeyboardMarkup(keyboard=start_btns, resize_keyboard=True)


    txt = l_trans("–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –±–æ—Ç, —è–∫–æ–≥–æ –∑–∞–¥–∞—á–∞ –º–æ—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–µ–±–µ –í –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –º–æ–∂–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É —Å–ø–æ–≤—ñ—â–µ–Ω—å –∞–±–æ —ñ–Ω—à–µ", language)
    await message.answer(txt, reply_markup=keyboard_start_btns)


    # Getting data for user
    id_user = str(message.from_id)
    username = message.from_user.username

    # push data
    if not ref.child(username).get():
        ref.child(username).set(
            {"id": id_user, "time-quotes": 1800, "favorite": [0], "category": "–í—Å—ñ", "language": language} 
        )


    user_data = ref.child(username).get()
    user_time_quotes = user_data.get("time-quotes")
    user_category = user_data.get("category")
    user_language = user_data.get("language")
    user_favorite = user_data.get("favorite")

    # Save variables for other functions - data user
    async with state.proxy() as data:
        data['should_stop'] = False    
        data['user_time_quotes'] = user_time_quotes
        data['user_category'] = user_category
        data['user_favorite'] = user_favorite
        data['user_language'] = user_language


@dp.message_handler(Text(equals=['–ó–∞–ø—É—Å–∫ ‚úà', 'Launch ‚úà']))
async def launching(message: types.Message, state: FSMContext):
    """ Send quotes from file, and inline btn 'add favorite', save in DB num quote """


    # save value False, if launching start loop, else stop. Pass next handler. 
    # Save variables for other functions - data user
    async with state.proxy() as data:
        data['should_stop'] = False   
        user_time_quotes = data.get('user_time_quotes')
        user_category = data.get('user_category')
        user_language = data.get('user_language')
        

    # send quote
    await message.answer(l_trans('–ó–∞–ø—É—Å—Ç–∏–ª–æ—Å—è‚úÖ\n –ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É, –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∫–æ–∂–Ω—ñ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏ –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É, –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö', user_language))

    while True:
        data = await state.get_data()
        should_stop = data.get('should_stop', False)

        if should_stop:
            break

        random_num = random.randint(0, 3000)
        
        try:
            btns_add_favorite = [
                [types.InlineKeyboardButton(text=l_trans("–î–æ–±–∞–≤–∏—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ üìù", user_language), callback_data=f"add_favorite_{random_num}")]
            ]
            keyboard_btns = types.InlineKeyboardMarkup(inline_keyboard=btns_add_favorite)

            quote = quotes[random_num]
            text = quote["text"]
            author = quote["author"]
            category = quote["category"]

            if user_category == "–í—Å—ñ":

                result = trans_google(f"{text}\n –ê–≤—Ç–æ—Ä - {author}\n –ö–∞—Ç–µ–≥–æ—Ä—ñ—è - {category}", dest=user_language).text

                await message.answer(result, reply_markup=keyboard_btns)
                await asyncio.sleep(user_time_quotes)

            elif user_category == category:

                result = trans_google(f"{text}\n –ê–≤—Ç–æ—Ä - {author}\n –ö–∞—Ç–µ–≥–æ—Ä—ñ—è - {category}", dest=user_language).text

                await message.answer(result, reply_markup=keyboard_btns)
                await asyncio.sleep(user_time_quotes)


        except IndexError:
            continue


@dp.message_handler(Text(equals=['–†—É—á–Ω–∏–π —Ä–µ–∂–∏–º', 'Manual mode']))
async def manual_mode(message: types.Message, state: FSMContext):

    # getting data user
    async with state.proxy() as data:
        data['should_stop'] = False   
        user_category = data.get('user_category')
        user_language = data.get('user_language')


    random_num = random.randint(0, 3000)


    btns_add_favorite = [
        [types.InlineKeyboardButton(text=l_trans("–î–æ–±–∞–≤–∏—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ üìù", user_language), callback_data=f"add_favorite_{random_num}")]
    ]
    keyboard_btns = types.InlineKeyboardMarkup(inline_keyboard=btns_add_favorite)

    quote = quotes[random_num]
    text = quote["text"]
    author = quote["author"]
    category = quote["category"]


    if user_category == "–í—Å—ñ":

        result = trans_google(f"{text}\n –ê–≤—Ç–æ—Ä - {author}\n –ö–∞—Ç–µ–≥–æ—Ä—ñ—è - {category}", dest=user_language).text
        await message.answer(result, reply_markup=keyboard_btns)

    elif user_category == category:

        result = trans_google(f"{text}\n –ê–≤—Ç–æ—Ä - {author}\n –ö–∞—Ç–µ–≥–æ—Ä—ñ—è - {category}", dest=user_language).text
        await message.answer(result, reply_markup=keyboard_btns)


@dp.message_handler(Text(equals=['–ó—É–ø–∏–Ω–∏—Ç–∏ ‚ùå', 'Stop ‚ùå']))
async def stop(message: types.Message, state: FSMContext):

    # save variable True, if user stopping loop 
    async with state.proxy() as data:
        data['should_stop'] = True
        user_language = data.get('user_language')


    await message.answer(l_trans('–ó—É–ø–∏–Ω–µ–Ω–æ ‚è±‚ùå', user_language))
    

@dp.message_handler(Text(equals=['–ù–∞–∑–∞–¥ ‚è™', 'Back ‚è™']))
async def btn_back(message: types.Message, state: FSMContext):

    # getting data user
    async with state.proxy() as data:
        user_language = data.get('user_language')


    # start buttons
    start_btns = [
        [types.KeyboardButton(text=l_trans('–ó–∞–ø—É—Å–∫ ‚úà', user_language))],
        [types.KeyboardButton(text=l_trans('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', user_language))],
        [types.KeyboardButton(text=l_trans('–ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ —Ü–∏—Ç–∞—Ç–∏ üìùüíñ', user_language))],
        [types.KeyboardButton(text=l_trans("–ó–≤'—è–∑–æ–∫ üí¨", user_language))],
        [types.KeyboardButton(text=l_trans('–ó—É–ø–∏–Ω–∏—Ç–∏ ‚ùå', user_language))],
    ]
    keyboard_start_btns = types.ReplyKeyboardMarkup(keyboard=start_btns, resize_keyboard=True)


    await message.answer(l_trans('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', user_language), reply_markup=keyboard_start_btns)  